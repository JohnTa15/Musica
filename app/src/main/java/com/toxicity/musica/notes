//        searchdir.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View view) {
//                openFilePicker();
//            }
//        });
//
//        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
//            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, PERMISSION_REQUEST_CODE);
//        } else {
//            fetchAudioFiles();
//        }
//    }




    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if(requestCode == PICK_AUDIO_FILE_REQUEST && resultCode == RESULT_OK && data != null) {
            Uri audioUri = data.getData();
            String selectedFolderPath = audioUri.getPath();

            FilesList.clear();
            File selectedFolder = new File(selectedFolderPath);
            File[] files = selectedFolder.listFiles();

            if (files != null) {
                for (File file : files) {
                    if (file.isFile() && isAudioFile(file.getName())) {
                        FilesList.add(file.getName());
                    }
                }
            }

            ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, FilesList);
            SongsListView.setAdapter(adapter);
        }
    }

    private void fetchAudioFiles() {
        progressBar.setVisibility(View.VISIBLE);

        File dir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS);
        File[] files = dir.listFiles();

        if (files != null) {
            for (File file : files) {
                if (file.isFile() && isAudioFile(file.getName())) {
                    FilesList.add(file.getName());
                    Log.d("DEBUG", "Added audio file: " + file.getName());
                }
            }
        }

        ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, FilesList);
        SongsListView.setAdapter(adapter);

        progressBar.setVisibility(View.GONE);
    }


    private boolean isAudioFile(String fileName) { //we want to make sure that those are the specific extensions that we want to insert
        String[] audioExtensions = {".mp3", ".wav", ".aac", ".ogg", ".flac"};

        for (String extension : audioExtensions) {
            if (fileName.toLowerCase().endsWith(extension)) {
                return true;
            }
        }
        return false;
    }
}


//        SearchButton.setOnClickListener(this);
    }
//        searchdir.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View view) {
//               openFolderPicker();
//                String state = Environment.DIRECTORY_DOWNLOADS;
//                if(Environment.MEDIA_MOUNTED.equals(state)) {
//                    if(Build.VERSION.SDK_INT >= 23) {
//                        if(checkPermission()) {
//                            File dir = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/");
//                            if (dir.exists()) {
//                                Log.d("path", dir.toString());
//                                File list[] = dir.listFiles();
//                                for (int i = 0; i < list.length; i++) {
//                                    SongsListView.add(list[i].getName());
//                                }
//                                ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, FilesList);
//                                SongsListView.setAdapter(adapter);
//                            }
//                        } else {
//                            requestStoragePermissionAndOpenFolderPicker();
//                        }
//                        }
//                    }
//                }
//        });

//        playbutton.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View view) {
//
//            }
//        });
//
//        forwardbutton.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View view) {
//
//            }
//        });
//        rewindbutton.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View view) {
//
//            }
//        });

    private void requestStoragePermissionAndOpenFolderPicker() { //checking if permissions are granted
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED ||
                ContextCompat.checkSelfPermission(this, Manifest.permission.READ_MEDIA_AUDIO) != PackageManager.PERMISSION_GRANTED) {
            // Permissions not granted, request them
            ActivityCompat.requestPermissions(
                    this,
                    new String[]{
                            Manifest.permission.READ_EXTERNAL_STORAGE,
                            Manifest.permission.READ_MEDIA_AUDIO
                    },
                    PERMISSION_REQUEST_CODE
            );
        } else {
            // Permissions already granted, open folder picker
            openFolderPicker();
        }
    }

        private void openFolderPicker() { //forcing user to choose only mp3 file
            Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
            intent.setType("audio/*");
            startActivityForResult(intent, PICK_FOLDER_REQUEST);
        }

    private boolean isAudioFile(String fileName) { //we want to make sure that those are the specific extensions that we want to insert
        String[] audioExtensions = {".mp3", ".wav", ".aac", ".ogg", ".flac"};

        for (String extension : audioExtensions) {
            if (fileName.toLowerCase().endsWith(extension)) {
                return true;
            }
        }
        return false;
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == PICK_FOLDER_REQUEST && resultCode == RESULT_OK) {
            Uri selectedFolderUri = data.getData();
            if (selectedFolderUri != null) {
                listAudioFilesFromFolder(selectedFolderUri);
            }
        }
    }


    private void listAudioFilesFromFolder(Uri folderUri) {
        FilesList.clear();

        String folderPath = folderUri.getPath();
        Log.d("MainActivity", "Selected Folder Path: " + folderPath);
        File folder = new File(folderPath);

        if (folder.isDirectory()) {
            File[] files = folder.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (file.isFile() && isAudioFile(file.getName())) {
                        FilesList.add(file.getName());
                    }
                }
            }
        }
        updateListView();
    }

    private void updateListView() {
        ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, FilesList);
        SongsListView.setAdapter(adapter);
    }}


    //        RemoteViews notibuttons = new RemoteViews(getPackageName(), R.layout.notifications); // Replace with your actual layout resource ID
    //
    //        Intent rewindButtonIntent = new Intent(this, NotificationReceiver.class);
    //        rewindButtonIntent.setAction("Rewind");
    //        PendingIntent rewindPendingIntent = PendingIntent.getBroadcast(this, 0, rewindButtonIntent, PendingIntent.FLAG_UPDATE_CURRENT);
    //
    //        Intent forwardButtonIntent = new Intent(this, NotificationReceiver.class);
    //        forwardButtonIntent.setAction("Forward");
    //        PendingIntent forwardPendingIntent = PendingIntent.getBroadcast(this, 1, forwardButtonIntent, PendingIntent.FLAG_UPDATE_CURRENT);
    //
    //        Intent ppButtonIntent = new Intent(this, NotificationReceiver.class);
    //        ppButtonIntent.setAction("Play/Pause");
    //        PendingIntent ppPendingIntent = PendingIntent.getBroadcast(this, 2, ppButtonIntent, PendingIntent.FLAG_UPDATE_CURRENT);
    //
    //
    //        notibuttons.setOnClickPendingIntent(R.id.rewindbutton, rewindPendingIntent);
    //        notibuttons.setOnClickPendingIntent(R.id.forwardbutton, forwardPendingIntent);
    //        notibuttons.setOnClickPendingIntent(R.id.playbutton, ppPendingIntent);
    //        notibuttons.setProgressBar(R.id.progressBar, maxProgress, currentProgress, false);